<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构 on 浮华生</title><link>https://www.ahianzhang.com/categories/%E6%9E%B6%E6%9E%84/</link><description>Recent content in 架构 on 浮华生</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 16 Mar 2022 11:47:50 +0800</lastBuildDate><atom:link href="https://www.ahianzhang.com/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>电商搜索技术总结</title><link>https://www.ahianzhang.com/post/summary18/</link><pubDate>Wed, 16 Mar 2022 11:47:50 +0800</pubDate><guid>https://www.ahianzhang.com/post/summary18/</guid><description>回顾 本篇文章我们针对于上文”电商搜索业务总结“中的业务需求进行拆解，并以技术角度进行分析。 对于关系好的商户我想把他们的品牌优先展示，增加曝光率 新上架一款商品，我想立即在平台上搜索到 当我使用具体款号搜索时，我希望只展示这一款的商品 我希望在搜索结果页中看到更多的品牌，而不是整页都是同</description></item><item><title>rabbitmq 如何提高可靠性并保证消费端幂等</title><link>https://www.ahianzhang.com/post/rabbitmq-reliability/</link><pubDate>Sun, 29 Mar 2020 18:09:13 +0000</pubDate><guid>https://www.ahianzhang.com/post/rabbitmq-reliability/</guid><description>什么是消息的可靠性 简单讲就是，一条消息由生产者发送出来，到 broker 上，存储到消息队列，再被消费者成功的消费。如果消息传着传着就传没了，此时消息就是不可靠的。 为什么要提高消息可靠性 拿订单或者交易举例，但凡涉及到与钱相关的系统，不允许出现任何数据偏差，如果因为在使用消息队列而丢失了数据，那</description></item><item><title>面向对象的理解</title><link>https://www.ahianzhang.com/post/object-oriented-mind/</link><pubDate>Tue, 08 Oct 2019 12:12:20 +0000</pubDate><guid>https://www.ahianzhang.com/post/object-oriented-mind/</guid><description>背景 说起面向对象的特征，大多数人肯会不加思索的答封装、继承、多态，可能还有抽象。最近在学 DDD 的时候，感觉它更加合理的运用了设计模式和面向对象的思想去解决复杂的业务场景，还有是阅读源码的时候也会看到大量的设计模式，所以说 Design Pattern 和 Object-Oriented 熟练的话会提升很大的代码质量（编程范式后续还会讲函数式和</description></item><item><title>企业平台技术框架</title><link>https://www.ahianzhang.com/post/architecture-framework/</link><pubDate>Fri, 27 Sep 2019 11:50:35 +0000</pubDate><guid>https://www.ahianzhang.com/post/architecture-framework/</guid><description>最近看了阿里的 TMF2.0 交易平台的介绍，觉得很有兴趣，所以展开学习，因为认知以及自身水平，对于技术平台框架理解有限，如有不当之处还望斧正。 在说 TMF2.0 之前先来说说 TOGAF。 TOGAF 全称 The Open Group Architecture Framework，及开放组织结构框架，引用 WiKi 上的介绍： 开放组体系结构框架（英语：The Open Group Architecture Framew</description></item><item><title>gitlab 添加代码规范检测</title><link>https://www.ahianzhang.com/post/code-style-check-ali-p3c/</link><pubDate>Wed, 19 Jun 2019 11:00:46 +0000</pubDate><guid>https://www.ahianzhang.com/post/code-style-check-ali-p3c/</guid><description>环境 gitlab 10.5.X + gitlab + ali p3c.pmd 好的代码能让人赏心悦目，方便 CodeReview 进行，为此，必须强制性的将代码规范起来。 如何做 git custom hooks client hooks 客户端钩子是存在本地的，按项目去配，这样能达到目的，但是起不到强制约束的效果，而且一个一个配很麻烦 server hooks 服务器端的钩子，每个项目中的 git hooks 全都是软连接到 gitlab 上的一个位置，默认是在 1 /opt/gitlab/embedded/service/gitlab-shell/hooks</description></item><item><title>操作系统作用</title><link>https://www.ahianzhang.com/post/os1/</link><pubDate>Sat, 01 Jun 2019 22:36:59 +0000</pubDate><guid>https://www.ahianzhang.com/post/os1/</guid><description>操作系统作用 1、资源管理者 都能管理什么？ 自底向上 对于操作系统内部来讲 硬件资源 像 CPU 、内存、设备（输入输出设备、磁盘、时钟、网卡） 软件资源 磁盘上的文件，各类管理信息 如何管理 跟踪记录资源的使用情况 确定资源的分配策略 实施资源的分配与回收 提高资源利用率 保护资源的使用 协调多个进程对资源的请求</description></item><item><title>技术选型怎么做</title><link>https://www.ahianzhang.com/post/technology-choice/</link><pubDate>Thu, 23 May 2019 10:44:21 +0000</pubDate><guid>https://www.ahianzhang.com/post/technology-choice/</guid><description>技术选型包括哪些 从个人观点出发，技术选型包括框架、工具、语言。 需要考虑的点 公司规模 团队技术水平 时间和成本 生态 风险 公司规模 小公司 对于初创公司或者小公司来讲，上级领导的意愿更多的是能够快速盈利，此时应该选择成熟便捷的框架， 尽量减少学习成本，这就属于经验优先，因为只有做出成品并且盈利，</description></item><item><title>迁移到 ubuntu18 的问题及配置</title><link>https://www.ahianzhang.com/post/ubuntu01/</link><pubDate>Sun, 02 Dec 2018 22:29:50 +0000</pubDate><guid>https://www.ahianzhang.com/post/ubuntu01/</guid><description>今天终于下定决心安装了 Ubuntu 系统，将新系统配置成自己熟悉的模式是需要很长的一段时间，更何况是双系统。下面是我遇到的问题，经过搜索与尝试并解决。 执行关机或者重启时卡死 在卡死后强制关机再启动后我去查了一下系统日志，发现是显卡驱动的问题，因为我的电脑是双显卡，一个是 Intel 的核显，另一个是 NVIDIA 的 GTX</description></item><item><title>使用 psi-probe 监控 Tomcat</title><link>https://www.ahianzhang.com/post/performanceance-tuning05/</link><pubDate>Thu, 06 Sep 2018 23:51:38 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning05/</guid><description>psi-probe 是一款非常强大的开源 Tomcat 监控工具，使用时可以点击这里下载 配置用户： 在 tomcat/webapps/docs/deployer-howto.html 文档的 manager 下有说明 conf/tomcat-user.xml 1、添加用户 &amp;lt;role rolename=&amp;quot;ahian&amp;quot;/&amp;gt; &amp;lt;role rolename=&amp;quot;manager-gui&amp;quot;/&amp;gt; &amp;lt;role rolename=&amp;quot;manager-status&amp;quot;/&amp;gt; &amp;lt;user username=&amp;quot;ahian&amp;quot; password=&amp;quot;123456&amp;quot; roles=&amp;quot;ahian,manager-gui,manager-status&amp;quot;/&amp;gt; 2、在 conf 文件夹中新建 Catalina/localhost/manager.xml 并编辑 1 2 3 4 5 6 7 8 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;Context privileged=&amp;#34;true&amp;#34; antiResourceLocking=&amp;#34;false&amp;#34; docBase=&amp;#34;${catalina.home}/webapps/manager&amp;#34; &amp;gt; &amp;lt;Valve className=&amp;#34;org.apache.catalina.valves.RemoteAddrValve&amp;#34; allow=&amp;#34;127\.0\.0\.1&amp;#34;/&amp;gt; &amp;lt;/Context&amp;gt; 3、将 probe.war 包拷贝到 webapp 下，启动 tomcat 4、访问 localhost:8080/probe</description></item><item><title>Tomcat 远程 Debug</title><link>https://www.ahianzhang.com/post/performanceance-tuning04/</link><pubDate>Tue, 04 Sep 2018 23:41:22 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning04/</guid><description>JDWP 协议介绍 JDWP 是 Java Debug Wire Protocol 的缩写，它定义了调试器（debugger）和被调试的 Java 虚拟机（target vm）之间的通信协议。 详请参考此文。 远程 Tomcat 服务器配置 修改启动文件 1 vi bin/startup.sh 在启动命令中添加启动参数 jpda exec &amp;quot;$PRGDIR&amp;quot;/&amp;quot;$EXECTABLE&amp;quot; jpda start &amp;quot;$@&amp;quot; 修改 catalina 文件（主要配置） 1 vi bin/catalina.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if [ &amp;#34;$1&amp;#34; = &amp;#34;jpda&amp;#34; ] ; then if</description></item><item><title>jstack 死循环和死锁定位</title><link>https://www.ahianzhang.com/post/performanceance-tuning03/</link><pubDate>Mon, 03 Sep 2018 22:26:21 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning03/</guid><description>jstack 是用来查看线程的命令 1 jstack [option] &amp;lt;pid&amp;gt; 先来看看线程的状态(官方文档) New Runnable Blocked Waiting Timed_Waiting Terminated 下面是 java 线程状态转化 代码模拟 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 @RestController public class CpuController</description></item><item><title>jmap &amp; mat 内存溢出</title><link>https://www.ahianzhang.com/post/performanceance-tuning02/</link><pubDate>Sun, 02 Sep 2018 19:46:08 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning02/</guid><description>模拟内存溢出 S0 和 S1 同时只会有一个使用，另一个是空的。 Metaspace 中主要存放 class 和 methods 等 模拟溢出的环境 堆内存溢出：通过不断地创建对象来将堆内存填充满 非堆内存溢出：通过继承 ClassLoader 配合 asm 工具来动态的创建类，直到将非堆内存填充满。这个代码可以点击这里查看 将启动的 VM 参数调小，方便快速实现效果。 1 2 3 4 5 6 7</description></item><item><title>JVM 常用参数查看</title><link>https://www.ahianzhang.com/post/performanceance-tuning01/</link><pubDate>Sun, 02 Sep 2018 16:57:36 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning01/</guid><description>JVM 参数 标准参数 -X 参数 -XX 参数 标准参数 1 2 3 4 5 6 7 8 -help -server -client -version -showversion -cp -classpath ... X 参数 1 2 3 -Xint:解释执行 -Xcomp：第一次使用就编译成本地代码(速度比慢) -Xmixed：混合模式，JVM 自己决定是否编译成本地代码 例如： java -Xint - version ---------------------- output: java version &amp;quot;1.8.0_121&amp;quot; Java(TM) SE Runtime Environment (build 1.8.0_121-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, interpreted mode) XX 参数 Boolea</description></item><item><title>VMware 12 NAT网络下配置 ubuntu 16.04 LTS 系统静态 IP</title><link>https://www.ahianzhang.com/post/ubuntu-nat-static-ip-config/</link><pubDate>Wed, 09 May 2018 20:25:53 +0000</pubDate><guid>https://www.ahianzhang.com/post/ubuntu-nat-static-ip-config/</guid><description>镜像是 ubuntu 16.04 server 版，主机是 Windows10 系统，因为要搭建 Hadoop 集群，所以配置一下，将此配置流程在此记录，方便查找。 查看主机 IP ipconfig 系统分配给虚拟机使用的网卡是 VMnet8，其内容如下： 如果有这块网卡则说明出于开启状态 查看 VMware 的虚拟网络选项 子网 ip 最后以 0 结尾，这个术语叫什么不知道，网关 ip 以 2 结尾 例如： 子网 ip</description></item><item><title>谈谈微服务</title><link>https://www.ahianzhang.com/post/microservice1/</link><pubDate>Sat, 25 Nov 2017 21:48:11 +0000</pubDate><guid>https://www.ahianzhang.com/post/microservice1/</guid><description>什么是微服务 微服务是一些协同工作的小而自治的服务。 发展历史 微服务是应运而生，它不是谁发明的，而是现实社会总结出来的一种模式。 特性 我们可以把微服务看成一种细粒度的架构。当我们参与大型项目构建时会考虑到使用模块化的思想尽可能减少模块间的依赖，但这些模块间的界限很难维护，模块间相似的代</description></item><item><title>单例模式</title><link>https://www.ahianzhang.com/post/design-pattern/</link><pubDate>Mon, 09 Oct 2017 16:24:48 +0000</pubDate><guid>https://www.ahianzhang.com/post/design-pattern/</guid><description>单例模式Singleton 作用：保证整个应用程序中某个实例有且只有一个 类型：饿汉模式和懒汉模式 首先创建一个Pattern类，什么都不写。 1 2 3 4 5 package top.richmanroad.demo; public class Pattern { } 再新建一个测试Test类 1 2 3 4 5 6 7 8 9 10 11 12 13 package top.richmanroad.demo; public class Test { public static void main(String[] args) { Pattern pt1=new Pattern(); Pattern pt2=new Pattern(); Pattern pt3=new Pattern(); System.out.println(pt1); System.out.println(pt2); System.out.println(pt3); } } 控制台输出结果 1 2</description></item><item><title>tor 使用</title><link>https://www.ahianzhang.com/post/web-1/</link><pubDate>Sat, 16 Sep 2017 13:14:41 +0000</pubDate><guid>https://www.ahianzhang.com/post/web-1/</guid><description>写在前面： 我写本文的目的是为了记录我所探索的世界，严禁做违法犯罪的事情，作者一直保持中立态度来学习。望来者自尊自律。 如果你只是为了翻墙，此文不适合你，我有更快的方式交给你如何使用代理。 配置 1.从Tor官网下载Tor并安装 2.运行Tor 3.你可以先尝试直接连接，如果等5分钟还没有好</description></item></channel></rss>