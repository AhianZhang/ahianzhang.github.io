<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 浮华生</title><link>https://www.ahianzhang.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 浮华生</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 09 Oct 2017 16:24:48 +0000</lastBuildDate><atom:link href="https://www.ahianzhang.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>单例模式</title><link>https://www.ahianzhang.com/post/design-pattern/</link><pubDate>Mon, 09 Oct 2017 16:24:48 +0000</pubDate><guid>https://www.ahianzhang.com/post/design-pattern/</guid><description>单例模式Singleton 作用：保证整个应用程序中某个实例有且只有一个 类型：饿汉模式和懒汉模式 首先创建一个Pattern类，什么都不写。 1 2 3 4 5 package top.richmanroad.demo; public class Pattern { } 再新建一个测试Test类 1 2 3 4 5 6 7 8 9 10 11 12 13 package top.richmanroad.demo; public class Test { public static void main(String[] args) { Pattern pt1=new Pattern(); Pattern pt2=new Pattern(); Pattern pt3=new Pattern(); System.out.println(pt1); System.out.println(pt2); System.out.println(pt3); } } 控制台输出结果 1 2</description></item></channel></rss>