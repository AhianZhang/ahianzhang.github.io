<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka on 象帝浮华生</title><link>https://www.ahianzhang.com/tags/Kafka/</link><description>Recent content in Kafka on 象帝浮华生</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 06 Jun 2022 13:41:05 +0800</lastBuildDate><atom:link href="https://www.ahianzhang.com/tags/Kafka/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka Java 客户端 Producer 原理分析</title><link>https://www.ahianzhang.com/post/kafka-producer-analysis/</link><pubDate>Mon, 06 Jun 2022 13:41:05 +0800</pubDate><guid>https://www.ahianzhang.com/post/kafka-producer-analysis/</guid><description>Kafka 是我认为最值得深入研究的一个消息队列，它的官方文档写的非常详尽，从配置到使用，从设计到实现无不体现研发的技术功底。 Kafka 已经发展到 3.x 时代，增加了很多的功能，比如幂等、事务等，如今已经能够保证消息 100% 消费了。 阅读源码能够有两点好处：一个是能够在工作中对 Kafka 进行深度优化，二是能够学习到消息</description></item><item><title>RabbitMQ 和 Kafka 应用原理简单对比</title><link>https://www.ahianzhang.com/post/message-queue/</link><pubDate>Sun, 29 May 2022 22:24:29 +0800</pubDate><guid>https://www.ahianzhang.com/post/message-queue/</guid><description>在实际工作中用到了 RabbitMQ 和 Kafka，本篇文章围绕二者在使用上的一些认知进行展开，不涉及技术细节，仅做实践上的参考。 RabbitMQ 多用于处理业务系统之间的信息交互，所以需要保证消息的可靠性和幂等性，我在项目中实际使用的是 at-least-once 投递方式，然后针对每条消息做幂等处理。 在使用 Spring Boot AMQP 或者其他 Rabbit clien开发</description></item></channel></rss>