<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka on 象帝浮华生</title><link>https://www.ahianzhang.com/tags/Kafka/</link><description>Recent content in Kafka on 象帝浮华生</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 06 Jun 2022 13:41:05 +0800</lastBuildDate><atom:link href="https://www.ahianzhang.com/tags/Kafka/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka Java 客户端 Producer 原理分析</title><link>https://www.ahianzhang.com/post/kafka-producer-analysis/</link><pubDate>Mon, 06 Jun 2022 13:41:05 +0800</pubDate><guid>https://www.ahianzhang.com/post/kafka-producer-analysis/</guid><description>Kafka Producer Java 客户端如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 public class MyProducer { static String topic = &amp;#34;test&amp;#34;; public static void main(String[] args) throws ExecutionException, InterruptedException { Properties props = new Properties(); props.put(&amp;#34;bootstrap.servers&amp;#34;, &amp;#34;localhost:9092&amp;#34;); /* 0 生产者发送消息之后不需要等待任何服务端的响应。 1 生产者发送消息之后，只要分区的 leader 副本成功写入消息，那么它就会收到来自服</description></item><item><title>RabbitMQ 和 Kafka 应用原理简单对比</title><link>https://www.ahianzhang.com/post/message-queue/</link><pubDate>Sun, 29 May 2022 22:24:29 +0800</pubDate><guid>https://www.ahianzhang.com/post/message-queue/</guid><description>在实际工作中用到了 RabbitMQ 和 Kafka，本篇文章围绕二者在使用上的一些认知进行展开，不涉及技术细节，仅做实践上的参考。 RabbitMQ 多用于处理业务系统之间的信息交互，所以需要保证消息的可靠性和幂等性，我在项目中实际使用的是 at-least-once 投递方式，然后针对每条消息做幂等处理。 在使用 Spring Boot AMQP 或者其他 Rabbit clien开发</description></item></channel></rss>