<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>象帝浮华生</title><link>https://www.ahianzhang.com/</link><description>Recent content on 象帝浮华生</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 06 Jan 2022 11:04:45 +0800</lastBuildDate><atom:link href="https://www.ahianzhang.com/index.xml" rel="self" type="application/rss+xml"/><item><title>2021 年终总结</title><link>https://www.ahianzhang.com/post/summary16/</link><pubDate>Thu, 06 Jan 2022 11:04:45 +0800</pubDate><guid>https://www.ahianzhang.com/post/summary16/</guid><description>2021 年对我个人来说是很精彩的一年，下面将以时间线的方式记录几个重要的时刻。 买了第一辆摩托车 买了第二辆摩托车 ’ 做公益项目 做公益项目给我印象最深的是我和朋友深夜 12 点吃着从便利蜂买的关东煮，坐在公司旁边的咖啡厅外的桌子上讨论技术问题，但是当产品孵化完成的喜悦是真的很有自豪感的。 偶然的机会</description></item><item><title>Cypress 实践总结</title><link>https://www.ahianzhang.com/post/cypress/</link><pubDate>Thu, 08 Jul 2021 09:52:31 +0800</pubDate><guid>https://www.ahianzhang.com/post/cypress/</guid><description>前言 最近接手了一个前端的项目，这个项目使用宜搭低代码平台进行搭建，由于每次修改代码或者调整组件时都有可能造成其他问题，影响整体的项目质量，然而又不想每次都进行手动的“点点点”操作，于是就打算研究一下如今流行的前端自动化框架 cypress。 下载 使用 npm 进行下载并运行 1 2 3 4 5 6 mkidr automation-test cd</description></item><item><title>年终总结</title><link>https://www.ahianzhang.com/post/summary15/</link><pubDate>Wed, 17 Feb 2021 08:57:23 +0800</pubDate><guid>https://www.ahianzhang.com/post/summary15/</guid><description>2020 年注定是不平凡的一年，在新冠疫情的影响下，居家隔离、办公、最低工资等等，企业即要保护打工人的安全又要保障公司的生存，可谓是手段频出。 今年是以自我提升为主。学习了极客时间的设计模式专栏，对设计模式有了新的认知，行为型、结构型、创建型各自的用途，以及为什么要使用设计模式，最后在实际</description></item><item><title>关于我</title><link>https://www.ahianzhang.com/about/</link><pubDate>Mon, 15 Feb 2021 18:26:17 +0800</pubDate><guid>https://www.ahianzhang.com/about/</guid><description>名称由来 象帝 取自 道冲，而用之或不盈。渊兮，似万物之宗；湛兮似或存，吾不知谁之子，象帝之先。 浮华生 取自 浮华一世中，倏若飞鸟过。 自我简介 对搜索和消息队列有深入研究； 关注研发效能和软件质量； 敏捷和 DevOps 实践者。 联系 Twitter: @AhianZhang E-mail: ahianzhang@gmail.com</description></item><item><title>使用 cucumber 进行行为驱动开发（BDD）</title><link>https://www.ahianzhang.com/post/spring-boot-cucumber/</link><pubDate>Tue, 20 Oct 2020 13:56:39 +0000</pubDate><guid>https://www.ahianzhang.com/post/spring-boot-cucumber/</guid><description>前言 保证软件质量的方式多种多样，根据测试金字塔上所描绘的，单元测试是最有效的，但是在公司内部实践的时候却遇到了一些问题，比如赶进度来不及写单元测试、改了代码逻辑单元测试也需要跟着变、验收时同样会有很多 bug，总结下来大概有几个原因： 需求分析时有很多细节没有考虑到（这个不可避免） 测</description></item><item><title>微服务应用集成 SpringCloud 步骤</title><link>https://www.ahianzhang.com/post/spring-cloud-intergration/</link><pubDate>Tue, 13 Oct 2020 15:14:02 +0000</pubDate><guid>https://www.ahianzhang.com/post/spring-cloud-intergration/</guid><description>前言 微服务开发模式能够将复杂的业务拆分成独立的更细粒度服务，一定程度上降低了业务复杂度，但是随之而来的是如何保证各个服务的可靠性和稳定性，SpringCloud 出现的目的是为了解决这些在服务拆分后会遇到的通用问题。配置中心能让同一服务多实例间无需重启快速更新配置、注册中心能对应用</description></item><item><title>电商搜索数据同步方案</title><link>https://www.ahianzhang.com/post/change-data-capture/</link><pubDate>Sat, 10 Oct 2020 10:36:07 +0000</pubDate><guid>https://www.ahianzhang.com/post/change-data-capture/</guid><description>前言 搜索系统主要分为两个部分一个是在线服务、一个是离线服务，在线服务是指排序、打分等靠近用户侧的部分，离线服务负责这篇文章属于离线部分范畴，本篇文章只是提供一个基础的思路，实际使用还需要适当调整和拓展。无论哪种方式都应该保证全量高吞吐、增量低延时的这个原则。 方案 定时任务主动拉取更</description></item><item><title>通过一道数值转换题重温计算机补码</title><link>https://www.ahianzhang.com/post/summary14/</link><pubDate>Thu, 02 Jul 2020 10:56:53 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary14/</guid><description>问题 昨天同事和我聊了他偶然间看到的一道面试题，引出了后面的深入分析。 1 System.out.println(Integer.valueOf((char)-1)); //output: 65535 为什么输出是 65535 而不是 -1 呢？ 分析 先回顾一下计算机相关的知识点： 原码(True form) 原码是指一个二进制数左边加上符号位后所得到的码，且当二进制数大于0时，符号位为0；二进制数小于0时，符号位为1；二进制数等于0时</description></item><item><title>macOS 系统推荐的一些软件</title><link>https://www.ahianzhang.com/post/macos-tools/</link><pubDate>Thu, 25 Jun 2020 19:03:45 +0000</pubDate><guid>https://www.ahianzhang.com/post/macos-tools/</guid><description>翻译 词典：mac 自带的，点按翻译 沙拉查词： chrome 上画线翻译 Alfred workflow + 有道翻译：支持查询单词并且回车键入当前位置 编程 IntelliJ IDEA：Java 工程利器 VSCode：写 React 和 Angular SSH 工具 electerm：最新发现的（2020-7-14），挺好用 壁纸 pap.er： 免费的，还不错 笔记 印象笔记 音乐 Spotif</description></item><item><title>DevOps 实施规划（持续更新）</title><link>https://www.ahianzhang.com/post/devops-01/</link><pubDate>Fri, 08 May 2020 09:12:16 +0000</pubDate><guid>https://www.ahianzhang.com/post/devops-01/</guid><description>下面是我在日常工作中碰到的现状，相信大多数中小企业也会有类似情况 需求不明确 流程不够自动化 没有写单元测试的意识 上班摸鱼 不愿接受新思想 工作总是被打断 服务器资源利用率不高 出现问题的原因有领导的问题，也有团队成员的问题。但问题已经出现，此时不应该是无休止的抱怨，而是寻找解决问题办法。我们</description></item><item><title>rabbitmq 如何提高可靠性并保证消费端幂等</title><link>https://www.ahianzhang.com/post/rabbitmq-reliability/</link><pubDate>Sun, 29 Mar 2020 18:09:13 +0000</pubDate><guid>https://www.ahianzhang.com/post/rabbitmq-reliability/</guid><description>什么是消息的可靠性 简单讲就是，一条消息由生产者发送出来，到 broker 上，存储到消息队列，再被消费者成功的消费。如果消息传着传着就传没了，此时消息就是不可靠的。 为什么要提高消息可靠性 拿订单或者交易举例，但凡涉及到与钱相关的系统，不允许出现任何数据偏差，如果因为在使用消息队列而丢失了数据，那</description></item><item><title>AMQ Model总结</title><link>https://www.ahianzhang.com/post/rabbit-mq-basic-concept/</link><pubDate>Sat, 21 Mar 2020 16:38:14 +0000</pubDate><guid>https://www.ahianzhang.com/post/rabbit-mq-basic-concept/</guid><description>前言 最近在写公司的消息队列组件，因为使用的是 RabbitMQ，其实现的规范是基于 AMQP-0-9-1 ，所以抽时间把官方的规范过了一遍，整理出主要的内容，记录于此。 AMQ 模型架构(AMQ Model Architecture) 基础组件 Publisher application 发送者 Consumer application 消费者 Server AMQP 服务器 Virtual host 在 Server 中提供逻辑隔离，类似于 MySQL 数据库中的多个表 Exchange 将消息根据不同的配置路由到</description></item><item><title>结对编程</title><link>https://www.ahianzhang.com/post/pair-programming/</link><pubDate>Thu, 26 Dec 2019 13:03:24 +0000</pubDate><guid>https://www.ahianzhang.com/post/pair-programming/</guid><description>在日常开发中常常在同一组内的成员虽然都负责同一个系统，但基本上是自己开发自己的，这样所带来的问题就是如果一个人请假了并且他负责模块出了问题急需解决，而此时团队的其他小伙伴要一点一点地扒代码，小心翼翼的闭坑，这应该是国内中小公司的常态。而结对编程恰好能解决这样的问题。 结对编程来源于</description></item><item><title>RSocket 介绍</title><link>https://www.ahianzhang.com/post/rsocket-intro/</link><pubDate>Tue, 10 Dec 2019 14:36:49 +0000</pubDate><guid>https://www.ahianzhang.com/post/rsocket-intro/</guid><description>RSocket 是一个新的通信协议， Facebook、Netfi、Pivotal、vlingo 等公司都有参与研发，它是一个位于传输层的新协议。在反应式编程中有两个瓶颈，一个是关系型数据库性能，一个是网络传输性能，对于数据库已经有r2dbc开发，而网络问题则由 RScoket 解决，有人说 VaughnVernon 去 vlingo 做 RSocket 研究是为了解</description></item><item><title>面向对象的理解</title><link>https://www.ahianzhang.com/post/object-oriented-mind/</link><pubDate>Tue, 08 Oct 2019 12:12:20 +0000</pubDate><guid>https://www.ahianzhang.com/post/object-oriented-mind/</guid><description>背景 说起面向对象的特征，大多数人肯会不加思索的答封装、继承、多态，可能还有抽象。最近在学 DDD 的时候，感觉它更加合理的运用了设计模式和面向对象的思想去解决复杂的业务场景，还有是阅读源码的时候也会看到大量的设计模式，所以说 Design Pattern 和 Object-Oriented 熟练的话会提升很大的代码质量（编程范式后续还会讲函数式和</description></item><item><title>企业平台技术框架</title><link>https://www.ahianzhang.com/post/architecture-framework/</link><pubDate>Fri, 27 Sep 2019 11:50:35 +0000</pubDate><guid>https://www.ahianzhang.com/post/architecture-framework/</guid><description>最近看了阿里的 TMF2.0 交易平台的介绍，觉得很有兴趣，所以展开学习，因为认知以及自身水平，对于技术平台框架理解有限，如有不当之处还望斧正。 在说 TMF2.0 之前先来说说 TOGAF。 TOGAF 全称 The Open Group Architecture Framework，及开放组织结构框架，引用 WiKi 上的介绍： 开放组体系结构框架（英语：The Open Group Architecture Framew</description></item><item><title>对创业的思考</title><link>https://www.ahianzhang.com/post/summary13/</link><pubDate>Fri, 27 Sep 2019 10:21:02 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary13/</guid><description>在我还在读大学的时候就创业的想法，所以平时也会对创业的方面的内容更关注一些，加上平时的思考与感悟整理出来。 活着 对于创业可能常听到“十个创业九个死”之类的话，对于一个初创公司来说没有比活下来更重要了，作为经营者要考虑成本，说利益至上可能显得又些不道德，但是现实就是如此。 发展 公司应该</description></item><item><title>知难行易</title><link>https://www.ahianzhang.com/post/summary12/</link><pubDate>Sun, 22 Sep 2019 15:15:14 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary12/</guid><description>人们总是用自己的认知限制，来否认事物的存在 ”认知提升“应该是近几年频繁会听到的短语。一个人的认知决定了这个人站在什么高度去看待问题。最近接触了一些人一些事感觉确实如此。 今年的世界人工智能大会开幕式马云和马斯克的谈话，个人更喜欢马斯克的想法，不局限于当下，敢作敢为。人类早晚都会在宇</description></item><item><title>一年工作经验总结</title><link>https://www.ahianzhang.com/post/summary11/</link><pubDate>Tue, 03 Sep 2019 15:58:48 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary11/</guid><description>从 17 年开始到现在断断续续的写了一百多篇博客，每次看到以前写的博客都很感慨，浏览之前的博客其实能感受到这几年的变化与成长，但最近想了一下决定删除一些文章，从技术的关注向深度转变，方向可以从分类中看到，获取短期内不会再发生什么变化了，这是一次重要的选择，想要得到就要先放弃。 工作内容 技</description></item><item><title>我与领域驱动之缘</title><link>https://www.ahianzhang.com/post/ddd-01/</link><pubDate>Tue, 30 Jul 2019 14:59:00 +0000</pubDate><guid>https://www.ahianzhang.com/post/ddd-01/</guid><description>缘起 正式接触到领域驱动还是耗子叔在易观峰会上的演讲，当时听的一知半解，现在回头来看一看真的很棒。 深入 领域驱动设计适用于复杂的业务系统，但对于那些简单的使用 DDD 反而会增加复杂度。 最近在读 Vaughn Vernon 《实现领域驱动设计》以及张逸写的领域驱动设计战略篇和战术篇， 收益良多。</description></item><item><title>TDD 中使用的工具</title><link>https://www.ahianzhang.com/post/test-tool/</link><pubDate>Tue, 30 Jul 2019 12:26:59 +0000</pubDate><guid>https://www.ahianzhang.com/post/test-tool/</guid><description>Junit 常用单元测试工具 MockMvc Spring 提供的模拟 Controller 接口调用的工具 Mocktio 能够提供 Mock 方法 Cucumber 行为驱动开发，以用户故事为核心，算是 TDD 的升级版，能够结合其他工具生成报表</description></item><item><title>tf-idf 算法</title><link>https://www.ahianzhang.com/post/tf-idf/</link><pubDate>Wed, 03 Jul 2019 08:54:36 +0000</pubDate><guid>https://www.ahianzhang.com/post/tf-idf/</guid><description>tf-idf (term frequence-inverse document frequence) 词频-逆文档频率，是搜索常用的一个权重相关算法，其作用是评估一个 document 在一整个 document list 中的重要程度，下面分开来讲。 term frequence tf 的意思就是一个词语在一个文件中出现的次数，对于一篇文章， tf 算法会将这篇文章进行分词并统计出现次数。这个词在这篇文章中出现的次数越多则说明越不重要，权重则越低。</description></item><item><title>gitlab 添加代码规范检测</title><link>https://www.ahianzhang.com/post/code-style-check-ali-p3c/</link><pubDate>Wed, 19 Jun 2019 11:00:46 +0000</pubDate><guid>https://www.ahianzhang.com/post/code-style-check-ali-p3c/</guid><description>环境 gitlab 10.5.X + gitlab + ali p3c.pmd 好的代码能让人赏心悦目，方便 CodeReview 进行，为此，必须强制性的将代码规范起来。 如何做 git custom hooks client hooks 客户端钩子是存在本地的，按项目去配，这样能达到目的，但是起不到强制约束的效果，而且一个一个配很麻烦 server hooks 服务器端的钩子，每个项目中的 git hooks 全都是软连接到 gitlab 上的一个位置，默认是在 1 /opt/gitlab/embedded/service/gitlab-shell/hooks</description></item><item><title>query 改写</title><link>https://www.ahianzhang.com/post/query-rewrite/</link><pubDate>Tue, 18 Jun 2019 15:36:03 +0000</pubDate><guid>https://www.ahianzhang.com/post/query-rewrite/</guid><description>什么是 query 改写 query 改写是搜索系统中最基础也是最重要的一个模块，简单来讲就是把用户输入的 keyword 转换成最贴近搜索系统内部的可识别的 keyword。 搜索引擎检索 keyword 的时候主要是匹配和排序，匹配也常常被称作“召回”，在搜索和推荐领域会有一个“召回率”的指标，在此不做展开。query 改写则会直接影响</description></item><item><title>阶段性总结</title><link>https://www.ahianzhang.com/post/summary10/</link><pubDate>Tue, 18 Jun 2019 10:48:19 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary10/</guid><description>博客断断续续的在更着，总是想写总是找不到合适的时间。 做了那些事情 搜索 用 solr 将公司的搜索系统重构了一遍，但是感觉很有成就感，但现在看来真的很 low ，当然好的架构是简单高效的，但是对于搜索用 job 的方式去同步真的很 low ，而且性能很差。搜索是商品展示的关键，为什么要用 job 的方式去同步，这是领导决定的</description></item><item><title>操作系统作用</title><link>https://www.ahianzhang.com/post/os1/</link><pubDate>Sat, 01 Jun 2019 22:36:59 +0000</pubDate><guid>https://www.ahianzhang.com/post/os1/</guid><description>操作系统作用 1、资源管理者 都能管理什么？ 自底向上 对于操作系统内部来讲 硬件资源 像 CPU 、内存、设备（输入输出设备、磁盘、时钟、网卡） 软件资源 磁盘上的文件，各类管理信息 如何管理 跟踪记录资源的使用情况 确定资源的分配策略 实施资源的分配与回收 提高资源利用率 保护资源的使用 协调多个进程对资源的请求</description></item><item><title/><link>https://www.ahianzhang.com/post/leetcode206/</link><pubDate>Thu, 30 May 2019 09:43:49 +0000</pubDate><guid>https://www.ahianzhang.com/post/leetcode206/</guid><description>Consideration make three pointers , pre,current,next; initial pre as null use tmp to save current&amp;rsquo;s next node info change current&amp;rsquo;s next to link pre node(first is null) move pre pointer to next node move current pointer to next node soultion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode pre = null; ListNode current = head; while (current != null){ ListNode next = current.next; current.next = pre; pre = current; current = next; } return pre; } }</description></item><item><title>hamming-distance</title><link>https://www.ahianzhang.com/post/leetcode461/</link><pubDate>Tue, 28 May 2019 11:18:18 +0000</pubDate><guid>https://www.ahianzhang.com/post/leetcode461/</guid><description>The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, calculate the Hamming distance. Note: 0 ≤ x, y &amp;lt; 231. Example: Input: x = 1, y = 4 Output: 2 Explanation: 1 (0 0 0 1) 4 (0 1 0 0) ↑ ↑ The above arrows point to positions where the corresponding bits are different. Consideration This problem is also have a relationship with &amp;lsquo;^&amp;rsquo; , Think about it : 1(0001) and 4(0100) their Xor is 5(0101) . next we use &amp;amp; Operator to calculate the number of 1 , let the binary &amp;amp; 1 ,if result is 1 ,sum&amp;rsquo;s up , use &amp;raquo; to move the postion. 5(0101) 0&amp;amp;1 = 0 pass 01&amp;amp;01 = 1 sum 010&amp;amp;001 = 0 pass 0101&amp;amp;0001 = 1 sum</description></item><item><title>ElasticSearch API 基本操作</title><link>https://www.ahianzhang.com/post/elasticsearch03/</link><pubDate>Mon, 27 May 2019 17:52:23 +0000</pubDate><guid>https://www.ahianzhang.com/post/elasticsearch03/</guid><description>查看集群健康值 GET _cat/health?v 查看 node 信息 GET _nodes 查看索引信息 GET _cat/indices?v 创建索引 PUT /test?pretty 删除索引 DELETE /test?pretty 新建文档并建立索引 创建一个index为 ecommerce 的索引 PUT /ecommerce/_doc/1 { &amp;quot;product_id&amp;quot;:1234, &amp;quot;product_name&amp;quot;: &amp;quot;南极人&amp;quot;, &amp;quot;price&amp;quot;:99.9, &amp;quot;color&amp;quot;:&amp;quot;Red&amp;quot;, &amp;quot;tags&amp;quot;:[&amp;quot;轻松&amp;quot;,&amp;quot;舒服&amp;quot;] } PUT /ecommerce/_doc/2 { &amp;quot;product_id&amp;quot;:5678, &amp;quot;product_name&amp;quot;: &amp;quo</description></item><item><title>elasticsearch 集群容错</title><link>https://www.ahianzhang.com/post/elasticsearch02/</link><pubDate>Fri, 24 May 2019 16:15:45 +0000</pubDate><guid>https://www.ahianzhang.com/post/elasticsearch02/</guid><description>Q:有三台服务器，三个 Primary Shard怎么配置能使 ElasticSearch 达到高可用 在此之前应该先清楚 shard 、primary shard 、replica shard、node 的概念 还有 primary shard 在确定好个数后后期是无法更改的，能扩容的只有 replica shard。 三个 Primary Shard 的意思就是： 3 primary + 3 replica = 6 shard (默认情况下) 此时服务器的 node 分配如下： 一</description></item><item><title>ElasticSearch 基础概念</title><link>https://www.ahianzhang.com/post/elastic-search/</link><pubDate>Thu, 23 May 2019 17:08:16 +0000</pubDate><guid>https://www.ahianzhang.com/post/elastic-search/</guid><description>documnet 文档，类似于 Java 的实体类，但非面向对象的，比实体类更加灵活。 index 索引，用来存放文档，一个索引可存放若干个 document type ElastcSearch 7 以后过时，使用 _doc 代替，预计在未来会移除 node 单个服务器，其实就是一个 ES 实例，多个 node 组成一个集群，node 能够进行索引和查询操作。默认每个 node 启动时会分配一个 UUID 作为标识。 shard 分片，</description></item><item><title>技术选型怎么做</title><link>https://www.ahianzhang.com/post/technology-choice/</link><pubDate>Thu, 23 May 2019 10:44:21 +0000</pubDate><guid>https://www.ahianzhang.com/post/technology-choice/</guid><description>技术选型包括哪些 从个人观点出发，技术选型包括框架、工具、语言。 需要考虑的点 公司规模 团队技术水平 时间和成本 生态 风险 公司规模 小公司 对于初创公司或者小公司来讲，上级领导的意愿更多的是能够快速盈利，此时应该选择成熟便捷的框架， 尽量减少学习成本，这就属于经验优先，因为只有做出成品并且盈利，</description></item><item><title>条件概率、全概率与贝叶斯公式</title><link>https://www.ahianzhang.com/post/math01/</link><pubDate>Sat, 18 May 2019 12:17:40 +0000</pubDate><guid>https://www.ahianzhang.com/post/math01/</guid><description>条件概率公式 设事件A 发生的概率为 P(A), 事件B 发生的概率为 P(B),则在事件B发生的情况下事件A发生的概率（A given B 的概率）为： $$ P(A|B)=\frac{P(AB)}{P(B)} $$ 全概率公式 如果直接求事件A 的概率比较困难的时候，可以将事件A发生的概率分成一个个小的事件B的概率 $$ P(A)=\sum \limits_n{P(B_{n})P(A|B_{n})} $$ 贝叶斯公式 $$ P(B_{n}|A)=\frac{P(A|B_{n})P(B_{n})}{\sum \limits_n P(A|B_{n})P(B_{n})} $$</description></item><item><title>年终总结</title><link>https://www.ahianzhang.com/post/summary09/</link><pubDate>Mon, 31 Dec 2018 20:15:45 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary09/</guid><description>很久没有写博客了，上一篇大概是在月初，这次算是对过去进行总结，准备迎接新的一年。 我不是很会写博客，纯粹是附庸风雅。 2018年 今年是从学校走向工作岗位的第一年，也是第一个年终总结。 学校 感谢张健全老师，今年年初带我去一个初创公司做官网，现在看自己的代码很 LOW ，但当时已经算班上很 NB 的了，</description></item><item><title>迁移到 ubuntu18 的问题及配置</title><link>https://www.ahianzhang.com/post/ubuntu01/</link><pubDate>Sun, 02 Dec 2018 22:29:50 +0000</pubDate><guid>https://www.ahianzhang.com/post/ubuntu01/</guid><description>今天终于下定决心安装了 Ubuntu 系统，将新系统配置成自己熟悉的模式是需要很长的一段时间，更何况是双系统。下面是我遇到的问题，经过搜索与尝试并解决。 执行关机或者重启时卡死 在卡死后强制关机再启动后我去查了一下系统日志，发现是显卡驱动的问题，因为我的电脑是双显卡，一个是 Intel 的核显，另一个是 NVIDIA 的 GTX</description></item><item><title>总结</title><link>https://www.ahianzhang.com/post/summary08/</link><pubDate>Tue, 20 Nov 2018 22:18:18 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary08/</guid><description>有段时间没有写博客了，因为我在思考如何去写好一篇技术性文章，而不是随性所欲、天马星空似的。以前写的很多博客真的是太潦草，这就和 CSDN 那样一篇文章复制来复制去的不管什么页面样式乱了之类的，总之就是自己技术不到家，分析的深度也不过。看了会有很多感慨。只要死不了就不能停止学习新知识。 工作上</description></item><item><title>使用 psi-probe 监控 Tomcat</title><link>https://www.ahianzhang.com/post/performanceance-tuning05/</link><pubDate>Thu, 06 Sep 2018 23:51:38 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning05/</guid><description>psi-probe 是一款非常强大的开源 Tomcat 监控工具，使用时可以点击这里下载 配置用户： 在 tomcat/webapps/docs/deployer-howto.html 文档的 manager 下有说明 conf/tomcat-user.xml 1、添加用户 &amp;lt;role rolename=&amp;quot;ahian&amp;quot;/&amp;gt; &amp;lt;role rolename=&amp;quot;manager-gui&amp;quot;/&amp;gt; &amp;lt;role rolename=&amp;quot;manager-status&amp;quot;/&amp;gt; &amp;lt;user username=&amp;quot;ahian&amp;quot; password=&amp;quot;123456&amp;quot; roles=&amp;quot;ahian,manager-gui,manager-status&amp;quot;/&amp;gt; 2、在 conf 文件夹中新建 Catalina/localhost/manager.xml 并编辑 1 2 3 4 5 6 7 8 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;Context privileged=&amp;#34;true&amp;#34; antiResourceLocking=&amp;#34;false&amp;#34; docBase=&amp;#34;${catalina.home}/webapps/manager&amp;#34; &amp;gt; &amp;lt;Valve className=&amp;#34;org.apache.catalina.valves.RemoteAddrValve&amp;#34; allow=&amp;#34;127\.0\.0\.1&amp;#34;/&amp;gt; &amp;lt;/Context&amp;gt; 3、将 probe.war 包拷贝到 webapp 下，启动 tomcat 4、访问 localhost:8080/probe</description></item><item><title>Tomcat 远程 Debug</title><link>https://www.ahianzhang.com/post/performanceance-tuning04/</link><pubDate>Tue, 04 Sep 2018 23:41:22 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning04/</guid><description>JDWP 协议介绍 JDWP 是 Java Debug Wire Protocol 的缩写，它定义了调试器（debugger）和被调试的 Java 虚拟机（target vm）之间的通信协议。 详请参考此文。 远程 Tomcat 服务器配置 修改启动文件 1 vi bin/startup.sh 在启动命令中添加启动参数 jpda exec &amp;quot;$PRGDIR&amp;quot;/&amp;quot;$EXECTABLE&amp;quot; jpda start &amp;quot;$@&amp;quot; 修改 catalina 文件（主要配置） 1 vi bin/catalina.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 if [ &amp;#34;$1&amp;#34; = &amp;#34;jpda&amp;#34; ] ; then if</description></item><item><title>jstack 死循环和死锁定位</title><link>https://www.ahianzhang.com/post/performanceance-tuning03/</link><pubDate>Mon, 03 Sep 2018 22:26:21 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning03/</guid><description>jstack 是用来查看线程的命令 1 jstack [option] &amp;lt;pid&amp;gt; 先来看看线程的状态(官方文档) New Runnable Blocked Waiting Timed_Waiting Terminated 下面是 java 线程状态转化 代码模拟 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 @RestController public class CpuController</description></item><item><title>jmap &amp; mat 内存溢出</title><link>https://www.ahianzhang.com/post/performanceance-tuning02/</link><pubDate>Sun, 02 Sep 2018 19:46:08 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning02/</guid><description>模拟内存溢出 S0 和 S1 同时只会有一个使用，另一个是空的。 Metaspace 中主要存放 class 和 methods 等 模拟溢出的环境 堆内存溢出：通过不断地创建对象来将堆内存填充满 非堆内存溢出：通过继承 ClassLoader 配合 asm 工具来动态的创建类，直到将非堆内存填充满。这个代码可以点击这里查看 将启动的 VM 参数调小，方便快速实现效果。 1 2 3 4 5 6 7</description></item><item><title>JVM 常用参数查看</title><link>https://www.ahianzhang.com/post/performanceance-tuning01/</link><pubDate>Sun, 02 Sep 2018 16:57:36 +0000</pubDate><guid>https://www.ahianzhang.com/post/performanceance-tuning01/</guid><description>JVM 参数 标准参数 -X 参数 -XX 参数 标准参数 1 2 3 4 5 6 7 8 -help -server -client -version -showversion -cp -classpath ... X 参数 1 2 3 -Xint:解释执行 -Xcomp：第一次使用就编译成本地代码(速度比慢) -Xmixed：混合模式，JVM 自己决定是否编译成本地代码 例如： java -Xint - version ---------------------- output: java version &amp;quot;1.8.0_121&amp;quot; Java(TM) SE Runtime Environment (build 1.8.0_121-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, interpreted mode) XX 参数 Boolea</description></item><item><title>周总结(8.13-8.19)</title><link>https://www.ahianzhang.com/post/summary07/</link><pubDate>Mon, 20 Aug 2018 00:15:43 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary07/</guid><description>完成 jmeter 的 PPT 整理 主要学习缓存方面的内容，在近期会整理成文章。 学习 julia 争取成为 Julia 的布道者</description></item><item><title>周总结（7.30-8.4）</title><link>https://www.ahianzhang.com/post/summary06/</link><pubDate>Sat, 04 Aug 2018 20:52:20 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary06/</guid><description>月末月初，总的来说这一周过得很匆忙，30号下午到的北京，31号体检，1号入职，这时已经是周三了，花了几个小时把环境搭好，熟悉了工作环境，和那层楼的保安比较熟，因为差不多算是老乡，在外打拼都挺不易的，同事对工作都很热情，水平都很高，注重底层的知识，头一次见到大早上一群人讨论 HashMap 和 多线</description></item><item><title>使用移位运算符</title><link>https://www.ahianzhang.com/post/shift-operator/</link><pubDate>Sat, 26 May 2018 17:31:46 +0000</pubDate><guid>https://www.ahianzhang.com/post/shift-operator/</guid><description>middle = (L+R)/2 这样的写法 L+R 有可能溢出 middle = L + (R-L)/2 =&amp;gt;minddle = L + (R-L)&amp;gt;&amp;gt;1 这样写的好处是不会发生数据溢出，除以 2 则是向右移一位，位运算比算术运算快</description></item><item><title>master 公式</title><link>https://www.ahianzhang.com/post/algorithm-master-formula/</link><pubDate>Sat, 26 May 2018 11:26:46 +0000</pubDate><guid>https://www.ahianzhang.com/post/algorithm-master-formula/</guid><description>master公式 T(N) = a*T(N/b) + O(Nd) N：样本量 T：时间复杂度 a：样本量发生的次数 b：将样本量进行分治 c：执行子过程之外其余过程的时间复杂度 用途：计算递归算法的时间复杂度 快速计算 logba &amp;gt; d -&amp;gt; 复杂度为O(Nlogba) logba = d -&amp;gt; 复杂度为O(Nd* logN) logba &amp;lt; d -&amp;gt; 复杂度为O(Nd) 适用范围 递归调用使，划分的</description></item><item><title>VMware 12 NAT网络下配置 ubuntu 16.04 LTS 系统静态 IP</title><link>https://www.ahianzhang.com/post/ubuntu-nat-static-ip-config/</link><pubDate>Wed, 09 May 2018 20:25:53 +0000</pubDate><guid>https://www.ahianzhang.com/post/ubuntu-nat-static-ip-config/</guid><description>镜像是 ubuntu 16.04 server 版，主机是 Windows10 系统，因为要搭建 Hadoop 集群，所以配置一下，将此配置流程在此记录，方便查找。 查看主机 IP ipconfig 系统分配给虚拟机使用的网卡是 VMnet8，其内容如下： 如果有这块网卡则说明出于开启状态 查看 VMware 的虚拟网络选项 子网 ip 最后以 0 结尾，这个术语叫什么不知道，网关 ip 以 2 结尾 例如： 子网 ip</description></item><item><title>关于进制的计算</title><link>https://www.ahianzhang.com/post/code01/</link><pubDate>Sun, 25 Mar 2018 14:26:23 +0000</pubDate><guid>https://www.ahianzhang.com/post/code01/</guid><description>进制转换 进制包括 二进制 八进制 十进制 十六进制 二进制(BIN)转十进制(DEC) 将二进制数按权展开相加得十进制数 举例：10010 的十进制为 18 十进制(DEC)转二进制(BIN) 除 2 取余，逆序排列。 举例： 666 的二进制为 1010011010 二进制(BIN)转八进制(OCT) 从右向左，每三位二进制数为一组按权展</description></item><item><title>项目总结 第三篇</title><link>https://www.ahianzhang.com/post/summary05/</link><pubDate>Sun, 11 Feb 2018 21:20:43 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary05/</guid><description>春节将至，项目还是滞后了，功能基本上全部实现就差细节优化了，今天非常困，眼都睁不开了，今天整理整理项目中用到的东西 图片上传 使用 thumbnail 进行图片的压缩和加水印，文件上传使用表单提交会很快，需要注意的是在后台接收参数 RequestParam() 时候要注意与前台所传递的 name 值对应,否则可能会报错。 JQuery 的 DOM 和 BOM 处理 ，注意 sibling</description></item><item><title>项目总结 第二篇</title><link>https://www.ahianzhang.com/post/summary04/</link><pubDate>Tue, 30 Jan 2018 22:41:20 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary04/</guid><description>button 的 onclick 时间绑定 submitData 利用 AJAX 进行数据传输 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function submitData(){ var url=&amp;#34;&amp;lt;%=request.getContextPath()%&amp;gt;/updateGoodsCat.do&amp;#34;; var catId=$(&amp;#34;#catId&amp;#34;).val(); var name=$(&amp;#34;#name&amp;#34;).val(); var title=$(&amp;#34;#title&amp;#34;).val(); var pid=$(&amp;#34;#pid&amp;#34;).val(); var comments=$(&amp;#34;#comments&amp;#34;).val(); var params={ &amp;#34;catId&amp;#34;:catId, &amp;#34;name&amp;#34;:name, &amp;#34;title&amp;#34;:title, &amp;#34;pid&amp;#34;:pid, &amp;#34;comments&amp;#34;:comments,}; $.post(url,params,function(result){ // alert(result); //window.location.reload(); }); } 当 时间为 AJAXSubmit 时 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 $(&amp;#34;#radio1&amp;#34;).click(function () { $(&amp;#34;#isShow&amp;#34;).val($(&amp;#34;#radio1&amp;#34;).val()); }); $(&amp;#34;#radio2&amp;#34;).click(function () { $(&amp;#34;#isShow&amp;#34;).val($(&amp;#34;#radio2&amp;#34;).val()); }) function submitData(){ var title1=$(&amp;#34;#title1&amp;#34;).val(); var title2=$(&amp;#34;#title2&amp;#34;).val(); var cateId=$(&amp;#34;#cateId&amp;#34;).combotree(&amp;#39;getValue&amp;#39;); var author=$(&amp;#34;#author&amp;#34;).val(); console.log(cateId); var content = UE.getEditor(&amp;#39;container&amp;#39;).getContent(); var stemFrom=$(&amp;#34;#stemFrom&amp;#34;).val(); var amount=$(&amp;#34;#amount&amp;#34;).val(); var isShow = $(&amp;#34;#isShow&amp;#34;).val(); var params={ &amp;#34;title1&amp;#34;:title1,</description></item><item><title>editor.md 富文本编辑器的使用</title><link>https://www.ahianzhang.com/post/summary03/</link><pubDate>Tue, 30 Jan 2018 22:08:08 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary03/</guid><description>editormd 是一款国产的软件，虽然很久没更新了，但其所实现的功能已满足日常使用，下面主要讲使用时需要注意的点。 在 Body 中写两个文本域便于保存,注意 class 1 2 3 4 5 &amp;lt;div id=&amp;#34;articlemd&amp;#34; style=&amp;#34;margin-top: 10px&amp;#34;&amp;gt; &amp;lt;textarea class=&amp;#34;editormd-markdown-textarea&amp;#34; name=&amp;#34;content&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;!-- 第二个隐藏文本域，用来构造生成的HTML代码，方便表单POST提交，这里的name可以任意取，后台接受时以这个name键</description></item><item><title>项目总结 第一篇</title><link>https://www.ahianzhang.com/post/summary02/</link><pubDate>Tue, 30 Jan 2018 21:58:49 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary02/</guid><description>在公司做一个商业的网站，里面有很多值得学习和保存的内容。 这次是在未提交表单时进行图片回显的JavaScript代码,很棒的效果。 以下仅显示用法 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;封面图&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt; &amp;lt;input class=&amp;#34;easyui-filebox&amp;#34; style=&amp;#34;width:300px;&amp;#34; data-options=&amp;#39;onChange:change_photo&amp;#39; id=&amp;#34;file&amp;#34; name=&amp;#34;file&amp;#34; buttonText=&amp;#39</description></item><item><title>2017至今总结</title><link>https://www.ahianzhang.com/post/summary01/</link><pubDate>Mon, 29 Jan 2018 22:34:05 +0000</pubDate><guid>https://www.ahianzhang.com/post/summary01/</guid><description>2017 年过去快一个月了，今天刚好想整理一下记录。捋一捋去年都干了些什么。 2018年给我的感觉就是冷，连南方都在下雪，而在今年我也即将毕业，走向社会，这个寒假在和老师在一个初创公司做网站，学到了不少知识。 2017 年，就像是梦幻般的一年，人工智能、大数据、云计算等兴起，以及比特币的水涨船高，还</description></item><item><title>谈谈微服务</title><link>https://www.ahianzhang.com/post/microservice1/</link><pubDate>Sat, 25 Nov 2017 21:48:11 +0000</pubDate><guid>https://www.ahianzhang.com/post/microservice1/</guid><description>什么是微服务 微服务是一些协同工作的小而自治的服务。 发展历史 微服务是应运而生，它不是谁发明的，而是现实社会总结出来的一种模式。 特性 我们可以把微服务看成一种细粒度的架构。当我们参与大型项目构建时会考虑到使用模块化的思想尽可能减少模块间的依赖，但这些模块间的界限很难维护，模块间相似的代</description></item><item><title>单例模式</title><link>https://www.ahianzhang.com/post/design-pattern/</link><pubDate>Mon, 09 Oct 2017 16:24:48 +0000</pubDate><guid>https://www.ahianzhang.com/post/design-pattern/</guid><description>单例模式Singleton 作用：保证整个应用程序中某个实例有且只有一个 类型：饿汉模式和懒汉模式 首先创建一个Pattern类，什么都不写。 1 2 3 4 5 package top.richmanroad.demo; public class Pattern { } 再新建一个测试Test类 1 2 3 4 5 6 7 8 9 10 11 12 13 package top.richmanroad.demo; public class Test { public static void main(String[] args) { Pattern pt1=new Pattern(); Pattern pt2=new Pattern(); Pattern pt3=new Pattern(); System.out.println(pt1); System.out.println(pt2); System.out.println(pt3); } } 控制台输出结果 1 2</description></item><item><title>tor 使用</title><link>https://www.ahianzhang.com/post/web-1/</link><pubDate>Sat, 16 Sep 2017 13:14:41 +0000</pubDate><guid>https://www.ahianzhang.com/post/web-1/</guid><description>写在前面： 我写本文的目的是为了记录我所探索的世界，严禁做违法犯罪的事情，作者一直保持中立态度来学习。望来者自尊自律。 如果你只是为了翻墙，此文不适合你，我有更快的方式交给你如何使用代理。 配置 1.从Tor官网下载Tor并安装 2.运行Tor 3.你可以先尝试直接连接，如果等5分钟还没有好</description></item><item><title>归档</title><link>https://www.ahianzhang.com/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ahianzhang.com/archives/</guid><description/></item><item><title>搜索</title><link>https://www.ahianzhang.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ahianzhang.com/search/</guid><description/></item></channel></rss>